" vim:set ft=vim et sw=2:

set nocompatible

" Vim-Plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" Colorscheme
Plug 'romainl/Apprentice'

" ESSENTIALS: Code navigation outside of vim's built in motions/netrw
"  FZF - probably the most essential thing here. Ctrl+P or Unite could
"  maybe replace it. Relied on:
"   - Ctrl-P functionality to search in current folder OR pwd
"   - Grepping functionality with ripgrep :Rg
"   - Fuzzy buffer navigation with :Buffers (instead of unsorted :ls)
"   - MRU file list with :History
"   - Tag search with :Tags and :BTags
"   - File line search with :Lines and :BLines
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

"  NERDTree - this is configured not to behave as permanently open sidebar
"  (which I think is crap), but rather as a temporarily sidebar opened
"  persistent netrw. Less andd less useful with FZF, but sometimes you just
"  need a tree view of your files.
Plug 'scrooloose/nerdtree' " use it like sidebar netrw

"  Vim bookmarks - marks are not gone. But marks are very limiting due to
"  mental overhead. I don't just want to mark a line, I want to literally drop
"  an infinite number of bookmarks when I'm browsing code so I can go back to
"  a function to look at the reference + annotate my bookmarks.
Plug 'MattesGroeger/vim-bookmarks' 

" NON ESSENTIALS: Makes life easier
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'

" Make diffing tolerable. Signify in particular also works with hg
" Consider vim-gitgutter at some point once I stop using hg
Plug 'mhinz/vim-signify'
Plug 'will133/vim-dirdiff'

" Vim as a faux-IDE
"Plug 'Valloric/YouCompleteMe'
Plug 'dense-analysis/ale'
Plug 'ludovicchabant/vim-gutentags'

" C++ development with rtags
Plug 'lyuts/vim-rtags'

let vimplugins=$HOME."/.vimplugins"
if filereadable(vimplugins)
  exec 'source ' . vimplugins
endif

call plug#end()

" Plugin Configuration
packadd! matchit
 
"let g:ale_linters = {'cpp': ['clangtidy', 'cpplint']}
"let g:ale_cpp_clangtidy_checks = [
"  \'-bugprone-branch-clone',
"  \'-bugprone-signed-char-misuse',
"  \'-bugprone-unhandled-self-assignment',
"  \'-clang-diagnostic-implicit-int-float-conversion',
"  \'-modernize-use-auto',
"  \'-modernize-use-trailing-return-type',
"  \'-readability-convert-member-functions-to-static',
"  \'-readability-make-member-function-const',
"  \'-readability-qualified-auto',
"  \'-readability-redundant-access-specifiers'
"  \]
"let g:ale_fixers = {'cpp': ['clang-format']}
"let g:ale_fix_on_save = 1

let g:rtagsUseDefaultMappings = 0
let g:bookmark_no_default_key_mappings = 1

" iTerm2 cursor funkyness
" let &t_SI = "\<Esc>]50;CursorShape=1\x7"
" let &t_SR = "\<Esc>]50;CursorShape=2\x7"
" let &t_EI = "\<Esc>]50;CursorShape=0\x7"
"
let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeChDirMode=0 " My nerdtree open file thing breaks
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1

"let g:vimwiki_map_prefix = '<leader>e' " <leader>w for me is write file, soz.
"let g:vimwiki_list = [{'path':'~/wiki', 'syntax': 'markdown', 'ext': '.md'}]
"let g:vimwiki_autowriteall = 0 " super annoying

"" The following vimwiki configurations unfuck the keybindings
" I swapped header shifting to _ and + instead of - and =
" I swapped normalize link to = instead of +
" I *ALWAYS* bind _ to RemoveHeaderLevel otherwise VimWiki fucks my '-' bind
"nmap _ <Plug>VimwikiRemoveHeaderLevel
"autocmd FileType vimwiki nmap <buffer> = <Plug>VimwikiNormalizeLink
"autocmd FileType vimwiki vmap <buffer> = <Plug>VimwikiNormalizeLinkVisual
"autocmd FileType vimwiki nmap <buffer> + <Plug>VimwikiAddHeaderLevel

" Syntax and numbering
syntax on
set number
set relativenumber

" Default Tabbing
filetype plugin indent on

set autoindent
set smarttab

set expandtab
set shiftwidth=3
set softtabstop=3

" Status Line
set laststatus=2
set ruler
set showcmd

set statusline=%<
set statusline+=\ %f\ 
set statusline+=%h%m%r%w\ 
set statusline+=%#warningmsg#%*

set statusline+=%= " SPLIT

set statusline+=%{strlen(&fenc)?&fenc:'none'}[%{&ff}]\ 
set statusline+=❮\ %3(%l:\ %c%V%)\ 
set statusline+=❮\ %3(%P%)\ 

" Editor Display
set display+=lastline
set scrolloff=3

set cursorline
set colorcolumn=80

set listchars=tab:▸\ ,eol:¬,trail:•,nbsp:⋅

" Input Configuration
set ttimeout
set ttimeoutlen=100

set mouse=a
set backspace=indent,eol,start   " allows backspace over anything. default in vim

" Insert Mode
set nrformats-=octal             " excludes octal numbers for ^A and ^X. default in vim
set completeopt=menuone,longest,preview  " always displays the menu, even for a single completion, and fill out the longest common word

" Command Mode
set wildmenu                     " this enables command mode autocompletion menu
set wildmode=longest:full,full   " lists the options first (longest:full) and then tab through them (full)

" Persistent Undos
set undofile
set undodir=~/.vim/undo-dir/

" Vim Behaviour
set autoread
set history=1000
set undolevels=16384
set clipboard=unnamed
if has('unnamedplus')
  set clipboard=unnamedplus
endif

" Tags
set tags=./tags;,tags;

" Plugin
" let g:netrw_liststyle = 3
" let g:netrw_bufsettings='nu relativenumber nobl'
let g:dirvish_mode = ':sort ,^.*[\/],'
let g:dirvish_relative_paths = 0

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Keybindings
let mapleader=" "
let maplocalleader=" "

"" Most important keybindings. These are as short as possible.
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <leader>w :w<CR>
noremap <leader>q :q<CR>

function! VerticalMotion(key)
  let distance = v:count1
  if distance >= 2
	  exec "normal! m'"
  endif
  exec "normal! ".distance.a:key
endfunction
nnoremap <silent> j :<C-U>call VerticalMotion('j')<CR>
nnoremap <silent> k :<C-U>call VerticalMotion('k')<CR>

"" Command mode bindings
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

noremap <silent> \q :cclose<CR>
noremap <silent> ]q :cn<CR>
noremap <silent> [q :cp<CR>
noremap <silent> ]Q :clast<CR>
noremap <silent> [Q :cfirst<CR>
noremap <silent> ]b :bn<CR>
noremap <silent> [b :bp<CR>
noremap <silent> ]B :blast<CR>
noremap <silent> [B :bfirst<CR>
noremap <silent> \l :lclose<CR>
noremap <silent> ]l :lnext<CR>
noremap <silent> [l :lprevious<CR>
noremap <silent> ]L :llast<CR>
noremap <silent> [L :lfirst<CR>
noremap <silent> ]f :next<CR>
noremap <silent> [f :previous<CR>
noremap <silent> ]F :last<CR>
noremap <silent> [F :first<CR>

nnoremap <silent> <leader>m :marks<CR>

inoremap <C-u> <C-g>u<C-u>

" NERDTree Bindings
nnoremap <silent> <expr> + g:NERDTree.IsOpen() ? "\:NERDTreeToggle<CR>" : bufexists(expand('%')) ? "\:NERDTreeFind<CR>" : "\:NERDTreeToggle<CR>"
nnoremap <silent> - :NERDTreeToggle<CR>

" Bookmarks
nmap ]b <Plug>BookmarkNext
nmap [b <Plug>BookmarkPrev
nmap <Leader><Leader> <Plug>BookmarkToggle
nmap <Leader>i <Plug>BookmarkAnnotate
nmap <Leader>a <Plug>BookmarkShowAll
nmap <Leader>c <Plug>BookmarkClear
nmap <Leader>x <Plug>BookmarkClearAll
nmap <Leader>k <Plug>BookmarkMoveUp
nmap <Leader>j <Plug>BookmarkMoveDown
nmap <Leader>g <Plug>BookmarkMoveToLine

" FZF bindings
"" rebinding of ^p and ^n because those were the same as jk
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-n> :Files <C-R>=expand('%:h')<CR><CR>

"" s search, b buffers, / find current file, h history
nnoremap <leader>s :Rg 
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>F :BLines<CR>
nnoremap <silent> <leader>f :Lines<CR>
nnoremap <silent> <leader>h :History<CR>
nnoremap <silent> <leader>t :Tags<CR>
nnoremap <silent> <leader>T :BTags<CR>

" Option toggles
nnoremap <leader>ol :setlocal list! list?<CR>
nnoremap <leader>on :setlocal number! number?<CR>
nnoremap <leader>or :setlocal relativenumber! relativenumber?<CR>
nnoremap <leader>oh :setlocal hlsearch! hlsearch?<CR>
nnoremap <leader>os :setlocal spell! spell?<CR>
nnoremap <leader>ow :setlocal wrap! wrap?<CR>
nnoremap <leader>op :setlocal paste! paste?<CR>
nnoremap <leader>oc :setlocal cursorline! cursorline?<CR>
nnoremap <silent> <leader>n :nohlsearch<CR>

" Signify
nnoremap <leader>hd :SignifyHunkDiff<CR>
nnoremap <leader>hu :SignifyHunkUndo<CR>

" Filetype specific commands
autocmd BufNewFile,BufRead *.journal setlocal filetype=ledger

autocmd FileType php setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType puppet setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4
autocmd FileType ruby setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType javascript setlocal expandtab shiftwidth=2 softtabstop=2
autocmd FileType html setlocal expandtab shiftwidth=2 softtabstop=2

autocmd FileType cpp setlocal noexpandtab shiftwidth=2 tabstop=2
autocmd FileType cpp nmap <buffer> <Leader>li :call rtags#SymbolInfo()<CR>
autocmd FileType cpp nmap <buffer> <Leader>lj :call rtags#JumpTo(g:SAME_WINDOW)<CR>
autocmd FileType cpp nmap <buffer> <Leader>lJ :call rtags#JumpTo(g:SAME_WINDOW, { '--declaration-only' : '' })<CR>
autocmd FileType cpp nmap <buffer> <Leader>lS :call rtags#JumpTo(g:H_SPLIT)<CR>
autocmd FileType cpp nmap <buffer> <Leader>lV :call rtags#JumpTo(g:V_SPLIT)<CR>
autocmd FileType cpp nmap <buffer> <Leader>lT :call rtags#JumpTo(g:NEW_TAB)<CR>
autocmd FileType cpp nmap <buffer> <Leader>lp :call rtags#JumpToParent()<CR>
autocmd FileType cpp nmap <buffer> <Leader>lf :call rtags#FindRefs()<CR>
autocmd FileType cpp nmap <buffer> <Leader>lF :call rtags#FindRefsCallTree()<CR>
autocmd FileType cpp nmap <buffer> <Leader>ln :call rtags#FindRefsByName(input("Pattern? ", "", "customlist,rtags#CompleteSymbols"))<CR>
autocmd FileType cpp nmap <buffer> <Leader>ls :call rtags#FindSymbols(input("Pattern? ", "", "customlist,rtags#CompleteSymbols"))<CR>
autocmd FileType cpp nmap <buffer> <Leader>lr :call rtags#ReindexFile()<CR>
autocmd FileType cpp nmap <buffer> <Leader>ll :call rtags#ProjectList()<CR>
autocmd FileType cpp nmap <buffer> <Leader>lw :call rtags#RenameSymbolUnderCursor()<CR>
autocmd FileType cpp nmap <buffer> <Leader>lv :call rtags#FindVirtuals()<CR>
autocmd FileType cpp nmap <buffer> <Leader>lh :call rtags#ShowHierarchy()<CR>
autocmd FileType cpp nmap <buffer> <Leader>lC :call rtags#FindSuperClasses()<CR>
autocmd FileType cpp nmap <buffer> <Leader>lc :call rtags#FindSubClasses()<CR>
autocmd FileType cpp nmap <buffer> <Leader>ld :call rtags#Diagnostics()<CR>

autocmd FileType go setlocal noexpandtab shiftwidth=4 tabstop=4
autocmd FileType go nmap <buffer> <localleader>lL <Plug>(go-decls-dir)
autocmd FileType go nmap <buffer> <localleader>la <Plug>(go-alternate-edit)
autocmd FileType go nmap <buffer> <localleader>lb <Plug>(go-build)
autocmd FileType go nmap <buffer> <localleader>lc <Plug>(go-callers)
autocmd FileType go nmap <buffer> <localleader>lC <Plug>(go-callees)
autocmd FileType go nmap <buffer> <localleader>ld <Plug>(go-doc)
autocmd FileType go nmap <buffer> <localleader>lD <Plug>(go-doc-vertical)
autocmd FileType go nmap <buffer> <localleader>le <Plug>(go-iferr)
autocmd FileType go nmap <buffer> <localleader>lh <Plug>(go-info)
autocmd FileType go nmap <buffer> <localleader>li <Plug>(go-implements)
autocmd FileType go nmap <buffer> <localleader>lI :GoImpl<CR>
autocmd FileType go nmap <buffer> <localleader>ll <Plug>(go-decls)
autocmd FileType go nmap <buffer> <localleader>lm <Plug>(go-imports)
autocmd FileType go nmap <buffer> <localleader>lM :GoImport 
autocmd FileType go nmap <buffer> <localleader>lr <Plug>(go-rename)
autocmd FileType go nmap <buffer> <localleader>ls :GoFillStruct<CR>
autocmd FileType go nmap <buffer> <localleader>lt <Plug>(go-test)
autocmd FileType go nmap <buffer> <localleader>lf <Plug>(go-test-func)
autocmd FileType go nmap <buffer> <localleader>lT <Plug>(go-test-compile)
autocmd FileType go nmap <buffer> <localleader>lu <Plug>(go-referrers)
autocmd FileType go nmap <buffer> <localleader>lx <Plug>(go-run)

" d for describe
" r rename

autocmd FileType ledger setlocal noexpandtab shiftwidth=4 tabstop=4
autocmd FileType ledger nnoremap <buffer> <silent> <C-m> :call ledger#transaction_state_set(line('.'), '*')<CR>
autocmd FileType ledger nnoremap <buffer> <silent> <C-n> :call ledger#transaction_date_set(line('.'), 'primary')<CR>
autocmd FileType ledger nnoremap <buffer> <silent> <C-t> :call ledger#entry()<CR>

" Color
colorscheme apprentice

" External untracked vimrcs
let localrc=expand("~/.vimlocalrc")
if filereadable(localrc)
  execute "source " . localrc
endif
